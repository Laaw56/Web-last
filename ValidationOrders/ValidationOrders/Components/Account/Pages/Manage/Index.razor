@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using ValidationOrders.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ApplicationDbContext dbContext

<PageTitle>Профиль</PageTitle>

<h3>Профиль</h3>
<StatusMessage />

<div class="row">
    <div class="col-md-6">
        <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <input type="text" value="@username" class="form-control" placeholder="Пожалуйства введите имя пользователя." disabled />
                <label for="username" class="form-label">Имя пользователя</label>
            </div>
            <div class="mb-3">
                <label for="lastname" class="form-label">Фамилия:</label>
                <InputText id="lastname" @bind-Value="Input.LastName" class="form-control" />
                <ValidationMessage For="() => Input.LastName" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="firstname" class="form-label">Имя:</label>
                <InputText id="firstname" @bind-Value="Input.FirstName" class="form-control" />
                <ValidationMessage For="() => Input.FirstName" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="middlename" class="form-label">Отчество:</label>
                <InputText id="middlename" @bind-Value="Input.MiddleName" class="form-control" />
                <ValidationMessage For="() => Input.MiddleName" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="gender" class="form-label">Пол:</label>
                <InputSelect id="gender" @bind-Value="Input.GenderId" class="form-control">
                    @foreach (Gender gender in genders)
                    {
                        <option value="@gender.Id">@gender.GenderName</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => Input.GenderId" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="datebirth" class="form-label">Дата рождения:</label>
                <InputDate id="datebirth" @bind-Value="Input.DateBirth" class="form-control" />
                <ValidationMessage For="() => Input.DateBirth" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="phone" class="form-label">Телефон:</label>
                <InputText id="phone" @bind-Value="Input.Phone" class="form-control" />
                <ValidationMessage For="() => Input.Phone" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Сохранить</button>
        </EditForm>
    </div>
</div>

@code {
    private ApplicationUser user = default!;
    private string? username;
    private string? phoneNumber;
    private string? LastName;
    private string? FirstName;
    private string? MiddleName;
    private int? GenderId;
    private string? Phone;
    private DateTime? DateBirth;
    public List<Gender>? genders;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        genders = dbContext.Genders.ToList();
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        username = await UserManager.GetUserNameAsync(user);
        LastName = user.LastName;
        FirstName = user.FirstName;
        MiddleName = user.MiddleName;
        Phone = user.Phone;
        DateBirth = user.DateBirth;
        GenderId = user.GenderId;

        Input.LastName ??= LastName;
        Input.FirstName ??= FirstName;
        Input.MiddleName ??= MiddleName;
        Input.Phone ??= Phone;
        Input.DateBirth ??= DateBirth;
        Input.GenderId ??= GenderId;



    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.LastName != LastName)
        {
            user.LastName = Input.LastName;

            var setLastName = await UserManager.UpdateAsync(user);
            if (!setLastName.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Ошибка: Ошибка при обновлении фамилии.", HttpContext);
            }
        }
        if (Input.FirstName != FirstName)
        {
            user.LastName = Input.FirstName;

            var setFirstName = await UserManager.UpdateAsync(user);
            if (!setFirstName.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Ошибка: Ошибка при обновлении имени.", HttpContext);
            }
        }
        if (Input.MiddleName != MiddleName)
        {
            user.MiddleName = Input.MiddleName;

            var setMiddleName = await UserManager.UpdateAsync(user);
            if (!setMiddleName.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Ошибка: Ошибка при обновлении отчества.", HttpContext);
            }
        }
        if (Input.GenderId != GenderId)
        {
            user.GenderId = Input.GenderId;

            var setGenderId = await UserManager.UpdateAsync(user);
            if (!setGenderId.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Ошибка: Ошибка при обновлении пола.", HttpContext);
            }
        }
        if (Input.DateBirth != DateBirth)
        {
            user.DateBirth = Input.DateBirth;

            var setDateBirth = await UserManager.UpdateAsync(user);
            if (!setDateBirth.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Ошибка: Ошибка при обновлении даты рождения.", HttpContext);
            }
        }
        if (Input.Phone != Phone)
        {
            user.Phone = Input.Phone;

            var setPhone = await UserManager.UpdateAsync(user);
            if (!setPhone.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Ошибка: Ошибка при обновлении номера телефона.", HttpContext);
            }
        }

        // if (Input.PhoneNumber != phoneNumber)
        // {
        //     var setPhoneResult = await UserManager.SetPhoneNumberAsync(user, Input.PhoneNumber);
        //     if (!setPhoneResult.Succeeded)
        //     {
        //         RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set phone number.", HttpContext);
        //     }
        // }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Профиль обновлен", HttpContext);
    }

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }

        [Required]
        [Display(Name = "Фамилия")]
        [StringLength(100, ErrorMessage = "{0} должно быть не меньше {2} и не больше {1} символов.", MinimumLength = 3)]
        public string? LastName { get; set; }

        [Required]
        [Display(Name = "Имя")]
        [StringLength(100, ErrorMessage = "{0} должно быть не меньше {2} и не больше {1} символов.", MinimumLength = 3)]
        public string? FirstName { get; set; }

        [Display(Name = "Отчество")]
        public string? MiddleName { get; set; }

        [Required]
        [Display(Name = "Пол")]
        public int? GenderId { get; set; }

        [Required]
        [Display(Name = "Дата рождения")]

        public DateTime? DateBirth { get; set; }

        [Required]
        [Display(Name = "Телефон")]

        public string? Phone { get; set; }
    }
}
