@page "/vacations/details"
@attribute [Authorize(Roles = "Employee, Admin")]

@using Microsoft.EntityFrameworkCore
@using ValidationOrders.Data
@inject IDbContextFactory<ValidationOrders.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Сведения об отпуске</PageTitle>

<h1>Сведения об отпуске</h1>

<div>
@*     <h2>Vacation</h2> *@
    <hr />
    @if (vacation is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Тип отпуска</dt>
            <dd class="col-sm-10">@vacation.Type</dd>
            <dt class="col-sm-2">Оплата отпуска</dt>
            <dd class="col-sm-10">@vacation.Payment</dd>
            <dt class="col-sm-2">Льготы по отпуску</dt>
            <dd class="col-sm-10">@vacation.Benefit</dd>
        </dl>
        <div>
            <a href="@($"/vacations/edit?id={vacation.Id}")">Редактировать</a> |
            <a href="@($"/vacations")">Назад к списку</a>
        </div>
    }
</div>

@code {
    private Vacation? vacation;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        vacation = await context.Vacations.FirstOrDefaultAsync(m => m.Id == Id);

        if (vacation is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
