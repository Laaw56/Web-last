@page "/vacations/delete"
@attribute [Authorize(Roles = "Admin")]

@using Microsoft.EntityFrameworkCore
@using ValidationOrders.Data
@inject IDbContextFactory<ValidationOrders.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Удаление данных об отпуске </PageTitle>

<h1>Удалить данные об отпуске </h1>

<p>Вы действительно хотите это сделать?</p>
<div>
    <h2>Отпуск</h2>
    <hr />
    @if (vacation is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Тип отпуска</dt>
            <dd class="col-sm-10">@vacation.Type</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Оплата отпуска</dt>
            <dd class="col-sm-10">@vacation.Payment</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Льготы по отпуску</dt>
            <dd class="col-sm-10">@vacation.Benefit</dd>
        </dl>
        <EditForm method="post" Model="vacation" OnValidSubmit="DeleteVacation" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(vacation is null)">Удалить</button> |
            <a href="/vacations">Назад к списку</a>
        </EditForm>
    }
</div>

@code {
    private Vacation? vacation;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        vacation = await context.Vacations.FirstOrDefaultAsync(m => m.Id == Id);

        if (vacation is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteVacation()
    {
        using var context = DbFactory.CreateDbContext();
        context.Vacations.Remove(vacation!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/vacations");
    }
}
