@page "/exportexcel"
@attribute [Authorize(Roles = "Admin")]

@using ClosedXML.Excel
@using Microsoft.EntityFrameworkCore
@using ValidationOrders.Data
@inject IDbContextFactory<ValidationOrders.Data.ApplicationDbContext> DbFactory
 @implements IAsyncDisposable

@inject IJSRuntime js

<button type="button" class="btn btn-success mb-2" @onclick="@ExportXLSdocuments">Экспорт всех таблиц в Excel</button>

@if (!string.IsNullOrEmpty(Message))
{
    <div class="@MessageType">@Message</div>
}

@code {

    ApplicationDbContext context = default!;
    private string Message { get; set; }
    private string MessageType { get; set; } = "alert-info";    

    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();
    }


    public async Task ExportXLSdocuments()
    {
        try
        {
            var XLSStream = ExportXLSRezult();

            await js.InvokeVoidAsync("BlazorDownloadFile", "документы.xlsx", XLSStream);

            Message = "Экспорт данных завершен успешно!"; 
            MessageType = "alert-success";
        }
        catch (Exception ex)
        {
            Message = $"Произошла ошибка: {ex.Message}"; 
            MessageType = "alert-danger"; 
        }
    }

    private byte[] ExportXLSRezult()
    {
        using var workbook = new XLWorkbook();

        var worksheet1 = workbook.Worksheets.Add("Employees");
        worksheet1.Cell(1, 1).Value = "Id";
        worksheet1.Cell(1, 2).Value = "LastName";
        worksheet1.Cell(1, 3).Value = "FirstName";
        worksheet1.Cell(1, 4).Value = "MiddleName";
        worksheet1.Cell(1, 5).Value = "Position";
        worksheet1.Cell(1, 6).Value = "Division";
        worksheet1.Cell(1, 7).Value = "EmploymentDate";

        worksheet1.Row(1).Style.Font.Bold = true;

        int i = 2;

        foreach (var rez in context.Employees)
        {
            worksheet1.Cell(i, 1).Value = rez.Id;
            worksheet1.Cell(i, 2).Value = rez.LastName;
            worksheet1.Cell(i, 3).Value = rez.FirstName;
            worksheet1.Cell(i, 4).Value = rez.MiddleName;
            worksheet1.Cell(i, 5).Value = rez.Position;
            worksheet1.Cell(i, 6).Value = rez.Division;
            worksheet1.Cell(i, 7).Value = rez.EmploymentDate.ToDateTime(TimeOnly.MinValue);
            i++;
        }


        var worksheet2 = workbook.Worksheets.Add("Documents");
        worksheet2.Cell(1, 1).Value = "Id";
        worksheet2.Cell(1, 2).Value = "Number";
        worksheet2.Cell(1, 3).Value = "RegistrationDate";
        worksheet2.Cell(1, 4).Value = "VacationStartDate";
        worksheet2.Cell(1, 5).Value = "VacationEndDate";
        worksheet2.Cell(1, 6).Value = "EmployeeId";
        worksheet2.Cell(1, 7).Value = "VacationId";

        worksheet2.Row(1).Style.Font.Bold = true;

        i = 2;

        foreach (var rez in context.Documents)
        {
            worksheet2.Cell(i, 1).Value = rez.Id;
            worksheet2.Cell(i, 2).Value = rez.Number;
            worksheet2.Cell(i, 3).Value = rez.RegistrationDate.ToDateTime(TimeOnly.MinValue);
            worksheet2.Cell(i, 4).Value = rez.VacationStartDate.ToDateTime(TimeOnly.MinValue);
            worksheet2.Cell(i, 5).Value = rez.VacationEndDate.ToDateTime(TimeOnly.MinValue);
            worksheet2.Cell(i, 6).Value = rez.EmployeeId;
            worksheet2.Cell(i, 7).Value = rez.VacationId;
            i++;
        }

        var worksheet3 = workbook.Worksheets.Add("Vacations");
        worksheet3.Cell(1, 1).Value = "Id";
        worksheet3.Cell(1, 2).Value = "Type";
        worksheet3.Cell(1, 3).Value = "Payment";
        worksheet3.Cell(1, 4).Value = "Benefit";

        worksheet3.Row(1).Style.Font.Bold = true;

        i = 2;

        foreach (var rez in context.Vacations)
        {
            worksheet3.Cell(i, 1).Value = rez.Id;
            worksheet3.Cell(i, 2).Value = rez.Type;
            worksheet3.Cell(i, 3).Value = rez.Payment;
            worksheet3.Cell(i, 4).Value = rez.Benefit;
            i++;
        }

        MemoryStream XLSStream = new();
        workbook.SaveAs(XLSStream);
        return XLSStream.ToArray();

    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}