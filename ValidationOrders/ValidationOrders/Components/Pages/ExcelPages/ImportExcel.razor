@page "/importexcel"
@attribute [Authorize(Roles = "Admin")]

@rendermode InteractiveServer
@using ClosedXML.Excel
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using ValidationOrders.Data
@inject IDbContextFactory<ValidationOrders.Data.ApplicationDbContext> DbFactory
@using Microsoft.AspNetCore.Components.Forms;



<PageTitle>Загрузка файла Excel для импорта в базу данных</PageTitle>

<p>
    <label>
        Укажите файл Excel для импорта:
        <InputFile OnChange="LoadFiles" />
    </label>
</p>
@if (isLoading)
{
    <p>Uploading...</p>
}
else
{
    <ul>


        <div>Количество импортированных сотрудников: @employeesList.Count()</div>
        <div>Количество импортированных документов: @documentsList.Count()</div>
        <div>Количество импортированных отпусков: @vacationsList.Count()</div>
        @if (StartTime != null)
        {
            TimeSpan ts = (EndTime ?? DateTime.Now).Subtract(StartTime ?? DateTime.Now);
            <div>
                Время выполнения: @String.Format("{0:00}:{1:00}", ts.Seconds, ts.Milliseconds / 10);
            </div>
        }
    </ul>
}

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div>Error: @ErrorMessage</div>
}

@code {
    //ApplicationDbContext context = default!;

    protected override async Task OnInitializedAsync()
    {
    }

    public string ErrorMessage { get; set; } = "";

    DateTime? StartTime;
    DateTime? EndTime;

    public List<Employee> employeesList = new();
    public List<Document> documentsList = new();
    public List<Vacation> vacationsList = new();



    private bool isLoading;

    string? errworksheet { get; set; } = "";

    int? errindexrow { get; set; } = 0;
    const int MAX_FILESIZE = 5000 * 1024; // 5 MB

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {

        isLoading = true;


        var browserFile = e.File;

        if (browserFile != null)
        {
            try
            {
                using (var fileStream = browserFile.OpenReadStream(MAX_FILESIZE))//от утечек
                {

                    employeesList = new();
                    documentsList = new();
                    vacationsList = new();

                    var randomFile = Path.GetTempFileName();
                    var extension = Path.GetExtension(browserFile.Name);
                    var targetFilePath = Path.ChangeExtension(randomFile, extension);
                    using (var destinationStream = new FileStream(targetFilePath, FileMode.Create))//памяти
                    {//не то, чтобы это довольно плохо, просто потом сборщик мусора будет немного грузить сервер.
                        await fileStream.CopyToAsync(destinationStream);
                        StartTime = DateTime.Now;
                        await GetDataTableFromExcelAsync(destinationStream);
                        EndTime = DateTime.Now;

                    }
                }
            }
            catch (Exception exception)
            {
                ErrorMessage = exception.Message;
            }
        }

        isLoading = false;
    }

    public async Task GetDataTableFromExcelAsync(FileStream file)
    {
        using (var context = DbFactory.CreateDbContext())
        {


            using (XLWorkbook workbook = new XLWorkbook(file))
            {
                var passwordHasher = new PasswordHasher<ApplicationUser>();

                try
                {
                    int EmployeeCount = await context.Employees.CountAsync();
                    int VacationCount = await context.Vacations.CountAsync();
                    int DocumentCount = await context.Documents.CountAsync();

                    foreach (IXLWorksheet worksheet in workbook.Worksheets)
                    {
                        errindexrow = 1;
                        errworksheet = worksheet.Name;
                        if (worksheet.Name == "Employees")
                        {
                            foreach (IXLRow row in worksheet.RowsUsed().Skip(1))
                            {
                                errindexrow++;
                                Employee employee = new Employee();
                                var range = worksheet.RangeUsed();
                                var table = range!.AsTable();
                                employee.Id = int.Parse(row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "Id").RangeAddress.FirstAddress.ColumnNumber).Value.ToString());
                                employee.LastName = row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "LastName").RangeAddress.FirstAddress.ColumnNumber).Value.ToString();
                                employee.FirstName = row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "FirstName").RangeAddress.FirstAddress.ColumnNumber).Value.ToString();
                                employee.MiddleName = row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "MiddleName").RangeAddress.FirstAddress.ColumnNumber).Value.ToString();
                                employee.Position = row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "Position").RangeAddress.FirstAddress.ColumnNumber).Value.ToString();
                                employee.Division = row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "Division").RangeAddress.FirstAddress.ColumnNumber).Value.ToString();
                                employee.EmploymentDate = DateOnly.ParseExact(row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "EmploymentDate").RangeAddress.FirstAddress.ColumnNumber).Value.ToString().Split(' ')[0], "dd.MM.yyyy");
                                employeesList.Add(employee);

                            }
                        }

                        errindexrow = 1;
                        if (worksheet.Name == "Vacations")
                        {
                            foreach (IXLRow row in worksheet.RowsUsed().Skip(1))
                            {
                                errindexrow++;
                                Vacation vacation = new Vacation();
                                var range = worksheet.RangeUsed();
                                var table = range!.AsTable();

                                vacation.Id = int.Parse(row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "Id").RangeAddress.FirstAddress.ColumnNumber).Value.ToString());
                                vacation.Type = row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "Type").RangeAddress.FirstAddress.ColumnNumber).Value.ToString();
                                vacation.Payment = row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "Payment").RangeAddress.FirstAddress.ColumnNumber).Value.ToString();
                                vacation.Benefit = row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "Benefit").RangeAddress.FirstAddress.ColumnNumber).Value.ToString();

                                vacationsList.Add(vacation);
                            }
                        }

                        errindexrow = 1;
                        if (worksheet.Name == "Documents")
                        {
                            foreach (IXLRow row in worksheet.RowsUsed().Skip(1))
                            {
                                errindexrow++;
                                Document document = new Document();
                                var range = worksheet.RangeUsed();
                                var table = range!.AsTable();

                                document.Id = int.Parse(row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "Id").RangeAddress.FirstAddress.ColumnNumber).Value.ToString());
                                document.Number = row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "Number").RangeAddress.FirstAddress.ColumnNumber).Value.ToString();
                                document.RegistrationDate = DateOnly.ParseExact(row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "RegistrationDate").RangeAddress.FirstAddress.ColumnNumber).Value.ToString().Split(' ')[0], "dd.MM.yyyy");
                                document.VacationStartDate = DateOnly.ParseExact(row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "VacationStartDate").RangeAddress.FirstAddress.ColumnNumber).Value.ToString().Split(' ')[0], "dd.MM.yyyy");
                                document.VacationEndDate = DateOnly.ParseExact(row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "VacationEndDate").RangeAddress.FirstAddress.ColumnNumber).Value.ToString().Split(' ')[0], "dd.MM.yyyy");
                                document.EmployeeId = int.Parse(row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "EmployeeId").RangeAddress.FirstAddress.ColumnNumber).Value.ToString()) + EmployeeCount;
                                document.VacationId = int.Parse(row.Cell(table.FindColumn(c => c.FirstCell().Value.ToString() == "VacationId").RangeAddress.FirstAddress.ColumnNumber).Value.ToString()) + VacationCount;

                                documentsList.Add(document);
                            }
                        }
                    }


                    errworksheet = "";
                    foreach (var el in employeesList)
                    {
                        el.Id = 0;
                    }


                    foreach (var el in documentsList)
                    {
                        el.Id = 0;
                    }
                    foreach (var el in vacationsList)
                    {
                        el.Id = 0;
                    }

                    using (var transaction = await context.Database.BeginTransactionAsync())
                    {
                        try
                        {
                            await context.AddRangeAsync(employeesList);
                            await context.SaveChangesAsync();

                            await context.AddRangeAsync(vacationsList);
                            await context.SaveChangesAsync();

                            await context.AddRangeAsync(documentsList);
                            await context.SaveChangesAsync();

                            await transaction.CommitAsync();
                        }
                        catch (Exception ex)
                        {
                            await transaction.RollbackAsync();
                            ErrorMessage = $"Ошибка при сохранении данных: {ex.Message}";
                            throw;
                        }
                    }

                }
                catch (Exception exception)
                {
                    if (errworksheet != "")
                        ErrorMessage = "Ошибка в импорте в таблице " + errworksheet + ", строка - " + errindexrow.ToString();
                    ErrorMessage = exception.Message;
                }

            }
        }

    }
}
