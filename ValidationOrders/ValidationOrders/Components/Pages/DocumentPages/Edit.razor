@page "/documents/edit"
@attribute [Authorize(Roles = "Admin")]

@using Microsoft.EntityFrameworkCore
@using ValidationOrders.Data
@inject IDbContextFactory<ValidationOrders.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Редактирование данных документа</PageTitle>

<h1>Редактировать данные документа</h1>

@* <h2>Document</h2> *@
<hr />
@if (Document is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Document" OnValidSubmit="UpdateDocument" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Document.Id" value="@Document.Id" />
                <div class="mb-3">
                    <label for="number" class="form-label">Номер документа:</label>
                    <InputText id="number" @bind-Value="Document.Number" class="form-control" />
                    <ValidationMessage For="() => Document.Number" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="registrationdate" class="form-label">Дата регистрации документа:</label>
                    <InputDate id="registrationdate" @bind-Value="Document.RegistrationDate" class="form-control" />
                    <ValidationMessage For="() => Document.RegistrationDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="vacationstartdate" class="form-label">Дата начала отпуска:</label>
                    <InputDate id="vacationstartdate" @bind-Value="Document.VacationStartDate" class="form-control" />
                    <ValidationMessage For="() => Document.VacationStartDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="vacationenddate" class="form-label">Дата окончания отпуска:</label>
                    <InputDate id="vacationenddate" @bind-Value="Document.VacationEndDate" class="form-control" />
                    <ValidationMessage For="() => Document.VacationEndDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="employeeid" class="form-label">Номер сотрудника:</label>
                    <InputNumber id="employeeid" @bind-Value="Document.EmployeeId" class="form-control" />
                    <ValidationMessage For="() => Document.EmployeeId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="vacationid" class="form-label">Номер отпуска:</label>
                    <InputNumber id="vacationid" @bind-Value="Document.VacationId" class="form-control" />
                    <ValidationMessage For="() => Document.VacationId" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Сохранить</button>
            </EditForm>
        </div>
    </div>
}

<div>

    <a href="@GetUrl()">Назад к списку</a>
</div>

@code {
    [SupplyParameterFromQuery(Name = "id")]
    private int Id { get; set; }

    [SupplyParameterFromQuery(Name = "employeeid")]
    public int? EmployeeId { get; set; }

    [SupplyParameterFromQuery(Name = "vacationid")]
    public int? VacationId { get; set; }

    private Document? Document { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Document ??= await context.Documents.FirstOrDefaultAsync(m => m.Id == Id);

        if (Document is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateDocument()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Document!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!DocumentExists(Document!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }
        NavigationManager.NavigateTo(GetUrl());
    }

    private string GetUrl()
    {
        if (EmployeeId.HasValue)
        {
            return $"/documents?employeeid={EmployeeId.Value}";
        }
        else if (VacationId.HasValue)
        {
            return $"/documents?vacationid={VacationId.Value}";
        }

        return "/documents";
    }

    private bool DocumentExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Documents.Any(e => e.Id == id);
    }
}
