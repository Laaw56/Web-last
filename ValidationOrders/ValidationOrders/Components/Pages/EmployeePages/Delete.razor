@page "/employees/delete"
@attribute [Authorize(Roles = "Admin")]

@using Microsoft.EntityFrameworkCore
@using ValidationOrders.Data
@inject IDbContextFactory<ValidationOrders.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Удаление сотрудника</PageTitle>

<h1>Удалить сотрудника</h1>

<p>Вы действительно хотите это сделать?</p>
<div>
    <h2>Сотрудник</h2>
    <hr />
    @if (employee is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Фамилия</dt>
            <dd class="col-sm-10">@employee.LastName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Имя</dt>
            <dd class="col-sm-10">@employee.FirstName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Отчество</dt>
            <dd class="col-sm-10">@employee.MiddleName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Должность</dt>
            <dd class="col-sm-10">@employee.Position</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Подразделение</dt>
            <dd class="col-sm-10">@employee.Division</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Дата приема на работу</dt>
            <dd class="col-sm-10">@employee.EmploymentDate</dd>
        </dl>
        <EditForm method="post" Model="employee" OnValidSubmit="DeleteEmployee" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(employee is null)">Удалить</button> |
            <a href="/employees">Назад к списку</a>
        </EditForm>
    }
</div>

@code {
    private Employee? employee;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        employee = await context.Employees.FirstOrDefaultAsync(m => m.Id == Id);

        if (employee is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteEmployee()
    {
        using var context = DbFactory.CreateDbContext();
        context.Employees.Remove(employee!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/employees");
    }
}
